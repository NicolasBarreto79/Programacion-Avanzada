const router = {
    modelo: "xr300",
    marca: "tplink",
    puertos: 4,
    velocidad: 1200,
    soporteWIFI: true
}
console.log(router);

//2
const dispositivos_red = [
    {tipo:"router", marca:"tplink", modelo:"1589", precio:500},
    {tipo:"swhitch", marca:"cisco", modelo:"2369", precio:1200},
    {tipo:"firewall", marca:"ubiquiti", modelo:"1589", precio:500},
    {tipo:"access point", marca:"tplink", modelo:"TL_sg108", precio:899},
    {tipo:"router", marca:"cisco", modelo:"archer C7", precio:420}    
]

//3
const dispositivosRed = [
    { tipo: "Router", marca: "Cisco", modelo: "1941", precio: 1200 },
    { tipo: "Switch", marca: "TP-Link", modelo: "TL-SG108", precio: 150 },
    { tipo: "Firewall", marca: "Cisco", modelo: "ASA 5506-X", precio: 2500 },
    { tipo: "Access Point", marca: "Ubiquiti", modelo: "UniFi AP", precio: 300 }
];

const dispositivosCisco = dispositivosRed.filter(
    (dispositivo) => dispositivo.marca === "Cisco"
);

console.log(dispositivosCisco);

//4
const servidores = [
{ nombre: "Servidor Web", ip: "192.168.1.10", sistema: "Linux" },
{ nombre: "Servidor de Base de Datos", ip: "192.168.1.11", sistema: "Windows" },
{ nombre: "Servidor de Correo", ip: "192.168.1.12", sistema: "Linux" },
{ nombre: "Servidor DNS", ip: "192.168.1.13", sistema: "Linux" },
{ nombre: "Servidor de Archivos", ip: "192.168.1.14", sistema: "Windows" }
];

const ips = servidores.map(servidor => servidor.ip);
console.log(ips);

//5
const paquetesDatos = [
{ id: 1, origen: "192.168.1.5", destino: "192.168.1.10", tamaño: 1200, prioridad: 3 },
{ id: 2, origen: "192.168.1.7", destino: "192.168.1.12", tamaño: 800, prioridad: 1 },
{ id: 3, origen: "192.168.1.3", destino: "192.168.1.11", tamaño: 1500, prioridad: 5 },
{ id: 4, origen: "192.168.1.8", destino: "192.168.1.14", tamaño: 950, prioridad: 2 },
{ id: 5, origen: "192.168.1.2", destino: "192.168.1.13", tamaño: 2000, prioridad: 4 }
];

const mayor1000 = paquetesDatos
.filter((datos) => datos.tamaño > 1000)
.sort((a, b) => b.prioridad - a.prioridad);
console.log(mayor1000);

//6
const traficoRed = {
"08:00": 1250, // MB transferidos
"09:00": 1870,
"10:00": 2100,
"11:00": 1950,
"12:00": 1600,
"13:00": 1300,
"14:00": 1700,
"15:00": 2200,
"16:00": 1800,
"17:00": 1500
};
// Calcula el total de datos transferidos
const total = Object.values(traficoRed).reduce((acc, val) => acc + val, 0);
console.log("Total de datos transferidos:", total, "MB");

// Encuentra la hora con mayor tráfico
let horaMayor = null;
let maxTrafico = -Infinity;

for (let hora in traficoRed) {
    if (traficoRed[hora] > maxTrafico) {
    maxTrafico = traficoRed[hora];
    horaMayor = hora;
    }
}
console.log("Hora con mayor tráfico:", horaMayor, "con", maxTrafico, "MB");

//7
const conexiones = [
{ id: 1, origen: "192.168.1.5", destino: "192.168.1.10", protocolo: "HTTP" },
{ id: 2, origen: "192.168.1.7", destino: "192.168.1.12", protocolo: "FTP" },
{ id: 3, origen: "192.168.1.3", destino: "192.168.1.11", protocolo: "SSH" },
{ id: 4, origen: "192.168.1.8", destino: "192.168.1.14", protocolo: "HTTP" },
{ id: 5, origen: "192.168.1.2", destino: "192.168.1.13", protocolo: "HTTPS" },
{ id: 6, origen: "192.168.1.6", destino: "192.168.1.10", protocolo: "FTP" },
{ id: 7, origen: "192.168.1.9", destino: "192.168.1.15", protocolo: "SSH" },
{ id: 8, origen: "192.168.1.4", destino: "192.168.1.11", protocolo: "HTTP" }
];

// Crea un objeto para contar las conexiones por protocolo
const conexionesPorProtocolo = conexiones.reduce((acc, { protocolo }) => {
    acc[protocolo] = (acc[protocolo] || 0) + 1;
    return acc;
}, {});

console.log("Conexiones por protocolo:", conexionesPorProtocolo);

//8
const dispositivos = [
  { id: 1, nombre: "PC-Desarrollo", ip: "192.168.1.5", tipo: "Estación de trabajo" },
  { id: 2, nombre: "PC-Marketing", ip: "192.168.1.7", tipo: "Estación de trabajo" },
  { id: 3, nombre: "Servidor-Web", ip: "192.168.1.10", tipo: "Servidor" },
  { id: 4, nombre: "Servidor-BD", ip: "192.168.1.11", tipo: "Servidor" }
];

const conexionesActivas = [
  { origen: "192.168.1.5", destino: "192.168.1.10", protocolo: "HTTP", bytes: 8500 },
  { origen: "192.168.1.7", destino: "192.168.1.11", protocolo: "MySQL", bytes: 12000 },
  { origen: "192.168.1.5", destino: "192.168.1.11", protocolo: "MySQL", bytes: 9200 }
];

// Umbral para considerar "alto"
const UMBRAL_ALERTA = 9000;

// Informe que combina info de dispositivos y conexiones
const informeActividad = conexionesActivas.map(conexion => {
  // Buscar el dispositivo de origen y destino
    const origenDispositivo = dispositivos.find(d => d.ip === conexion.origen);
    const destinoDispositivo = dispositivos.find(d => d.ip === conexion.destino);

  // Retornar el objeto combinado
    return {
    origen: origenDispositivo ? origenDispositivo.nombre : conexion.origen,
    destino: destinoDispositivo ? destinoDispositivo.nombre : conexion.destino,
    protocolo: conexion.protocolo,
    bytes: conexion.bytes,
    nivel: conexion.bytes > UMBRAL_ALERTA ? "alto" : "normal"
    };
});

console.log("Informe de actividad de red:", informeActividad);

// Filtrar alertas de nivel alto
const alertasAltas = informeActividad
    .filter(conexion => conexion.nivel === "alto")
    .map(alerta => 
    `ALERTA ALTA: ${alerta.origen} → ${alerta.destino} usando ${alerta.protocolo}, tráfico: ${alerta.bytes} bytes`
    );

console.log("Mensajes para el administrador:");
console.log(alertasAltas);

//9
const topologiaRed = {
  nodos: [
    { id: "A", tipo: "Router", ubicacion: "Planta 1" },
    { id: "B", tipo: "Switch", ubicacion: "Planta 1" },
    { id: "C", tipo: "Switch", ubicacion: "Planta 2" },
    { id: "D", tipo: "Switch", ubicacion: "Planta 3" },
    { id: "E", tipo: "Router", ubicacion: "Planta 3" }
  ],
  conexiones: [
    { origen: "A", destino: "B", ancho_banda: 1000 },
    { origen: "A", destino: "C", ancho_banda: 1000 },
    { origen: "B", destino: "C", ancho_banda: 100 },
    { origen: "B", destino: "D", ancho_banda: 100 },
    { origen: "C", destino: "D", ancho_banda: 100 },
    { origen: "C", destino: "E", ancho_banda: 1000 },
    { origen: "D", destino: "E", ancho_banda: 1000 }
  ]
};

// Inicializamos el contador de conexiones
const conexionesPorNodo = {};
topologiaRed.nodos.forEach(nodo => {
  conexionesPorNodo[nodo.id] = 0;
});

// Contar las conexiones de cada nodo
topologiaRed.conexiones.forEach(conexion => {
  conexionesPorNodo[conexion.origen]++;
  conexionesPorNodo[conexion.destino]++;
});

// Ordenar los nodos por número de conexiones (mayor a menor)
const nodosOrdenados = Object.entries(conexionesPorNodo)
  .sort((a, b) => b[1] - a[1]); // [id, conexiones]

// Generar sugerencias de optimización
const sugerencias = nodosOrdenados
  .filter(([id, conexiones]) => conexiones > 2)
  .map(([id, conexiones]) => {
    const nodo = topologiaRed.nodos.find(n => n.id === id);
    return `El nodo ${id} (${nodo.tipo}, ${nodo.ubicacion}) tiene ${conexiones} conexiones. Podría requerir más ancho de banda o revisión de carga.`;
  });

console.log("Conexiones por nodo:", conexionesPorNodo);
console.log("Nodos ordenados por número de conexiones:", nodosOrdenados);
console.log("Sugerencias de optimización:", sugerencias);

//10
const topologiaRed10 = {
  nodos: [
    { id: "A", tipo: "Router", ubicacion: "Planta 1" },
    { id: "B", tipo: "Switch", ubicacion: "Planta 1" },
    { id: "C", tipo: "Switch", ubicacion: "Planta 2" },
    { id: "D", tipo: "Switch", ubicacion: "Planta 3" },
    { id: "E", tipo: "Router", ubicacion: "Planta 3" }
  ],
  conexiones: [
    { origen: "A", destino: "B", ancho_banda: 1000 },
    { origen: "A", destino: "C", ancho_banda: 1000 },
    { origen: "B", destino: "C", ancho_banda: 100 },
    { origen: "B", destino: "D", ancho_banda: 100 },
    { origen: "C", destino: "D", ancho_banda: 100 },
    { origen: "C", destino: "E", ancho_banda: 1000 },
    { origen: "D", destino: "E", ancho_banda: 1000 }
  ]
};

// Inicializar contador de conexiones
const conexionesPorNodo10 = {};
topologiaRed10.nodos.forEach(nodo => {
  conexionesPorNodo10[nodo.id] = 0;
});

// Contar conexiones de cada nodo
topologiaRed10.conexiones.forEach(conexion => {
  conexionesPorNodo10[conexion.origen]++;
  conexionesPorNodo10[conexion.destino]++;
});

// Ordenar nodos de mayor a menor conexiones
const nodosOrdenados10 = Object.entries(conexionesPorNodo10)
  .sort((a, b) => b[1] - a[1]);

// Sugerir optimizaciones
const sugerencias10 = nodosOrdenados10
  .filter(([_, conexiones]) => conexiones > 2)
  .map(([id, conexiones]) => {
    const nodo = topologiaRed10.nodos.find(n => n.id === id);
    return `Nodo ${id} (${nodo.tipo}, ${nodo.ubicacion}) tiene ${conexiones} conexiones. Podría requerir balanceo de carga o mayor ancho de banda.`;
  });

console.log("Conexiones por nodo (Ejercicio 10):", conexionesPorNodo10);
console.log("Nodos ordenados por número de conexiones (Ejercicio 10):", nodosOrdenados10);
console.log("Sugerencias de optimización (Ejercicio 10):", sugerencias10);
